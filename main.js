/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AlwaysPinnedTab
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/message.ts
var import_obsidian = require("obsidian");

// package.json
var name = "obsidian-tab-management-plugin";

// src/message.ts
var log = (message) => {
  console.log(`[${name}]: ${message}`);
};

// src/main.ts
var AlwaysPinnedTab = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.styleEl = null;
  }
  async onload() {
    log("loading...");
    this.registerEvents();
    this.injectStyles();
    log("loaded. CSS injected.");
  }
  onunload() {
    log("unloaded.");
    this.removeStyles();
    log("CSS removed.");
  }
  registerEvents() {
    this.app.workspace.on("active-leaf-change", (leaf) => {
      var _a, _b;
      if (!leaf) return;
      if (!leaf.pinned) {
        leaf.setPinned(true);
      }
      const sameLeaves = [];
      (_b = (_a = leaf.parent) == null ? void 0 : _a.children) == null ? void 0 : _b.forEach((child) => {
        var _a2, _b2;
        const l = this.app.workspace.getLeafById(child.id);
        const isMarkdown = "file" in leaf.view && "file" in l.view;
        if (isMarkdown && ((_a2 = leaf.view.file) == null ? void 0 : _a2.path) === ((_b2 = l.view.file) == null ? void 0 : _b2.path)) {
          sameLeaves.push(l);
        }
      });
      if (sameLeaves.length <= 1) return;
      const [main, ...duplicates] = sameLeaves;
      if (!main.pinned) {
        main.setPinned(true);
      }
      this.app.workspace.setActiveLeaf(main);
      duplicates.forEach((l) => {
        sleep(0).then(() => l.detach());
      });
    });
  }
  injectStyles() {
    if (this.styleEl) return;
    this.styleEl = document.createElement("style");
    this.styleEl.id = "always-pinned-tab-styles";
    this.styleEl.textContent = `
      /* 1. \uD0ED \uD540 \uC544\uC774\uCF58 \uC228\uAE30\uAE30 */
      .workspace-tab-header-status-icon.mod-pinned {
        display: none !important;
      }

      /* 2. \uC138\uB85C \uBD84\uD560 \uC0C1\uD0DC\uC5D0\uC11C \uB2EB\uAE30 \uBC84\uD2BC \uD56D\uC0C1 \uBCF4\uC774\uAE30 */
      .workspace-split.mod-vertical.mod-root .workspace-tab-header-inner-close-button {
        display: block !important;
      }

      /* 3. pane \uBA54\uB274\uC5D0\uC11C 'pane' \uC139\uC158 \uD56D\uBAA9 \uC228\uAE30\uAE30 */
      .menu .menu-item.tappable[data-section="pane"] {
        display: none !important;
      }
    `;
    document.head.appendChild(this.styleEl);
  }
  removeStyles() {
    if (this.styleEl) {
      this.styleEl.remove();
      this.styleEl = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL21lc3NhZ2UudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBzcmMvbWFpbi50c1xuaW1wb3J0IHsgUGx1Z2luLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9tZXNzYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWx3YXlzUGlubmVkVGFiIGV4dGVuZHMgUGx1Z2luIHtcbiAgcHJpdmF0ZSBzdHlsZUVsOiBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGxvZygnbG9hZGluZy4uLicpO1xuICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICB0aGlzLmluamVjdFN0eWxlcygpO1xuICAgIGxvZygnbG9hZGVkLiBDU1MgaW5qZWN0ZWQuJyk7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICBsb2coJ3VubG9hZGVkLicpO1xuICAgIHRoaXMucmVtb3ZlU3R5bGVzKCk7XG4gICAgbG9nKCdDU1MgcmVtb3ZlZC4nKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAobGVhZikgPT4ge1xuICAgICAgaWYgKCFsZWFmKSByZXR1cm47XG5cbiAgICAgIC8vIDEpIFx1RDU2RFx1QzBDMSBcdUQ1NDAgXHVBQ0UwXHVDODE1XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICBpZiAoIWxlYWYucGlubmVkKSB7XG4gICAgICAgIGxlYWYuc2V0UGlubmVkKHRydWUpO1xuICAgICAgfVxuXG4gICAgICAvLyAyKSBcdUM5MTFcdUJDRjUgXHVEMEVEIFx1Qzc5MFx1QjNEOSBcdUM4MUNcdUFDNzAgKFx1RDU2RFx1QzBDMSBcdUQ2NUNcdUMxMzFcdUQ2NTQpXG4gICAgICBjb25zdCBzYW1lTGVhdmVzOiBXb3Jrc3BhY2VMZWFmW10gPSBbXTtcbiAgICAgIGxlYWYucGFyZW50Py5jaGlsZHJlbj8uZm9yRWFjaCgoY2hpbGQ6IFdvcmtzcGFjZUxlYWYgJiB7IGlkOiBzdHJpbmcgfSkgPT4ge1xuICAgICAgICBjb25zdCBsID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWZCeUlkKGNoaWxkLmlkKTtcbiAgICAgICAgY29uc3QgaXNNYXJrZG93biA9ICdmaWxlJyBpbiBsZWFmLnZpZXcgJiYgJ2ZpbGUnIGluIGwudmlldztcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBpZiAoaXNNYXJrZG93biAmJiBsZWFmLnZpZXcuZmlsZT8ucGF0aCA9PT0gbC52aWV3LmZpbGU/LnBhdGgpIHtcbiAgICAgICAgICBzYW1lTGVhdmVzLnB1c2gobCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHNhbWVMZWF2ZXMubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgY29uc3QgW21haW4sIC4uLmR1cGxpY2F0ZXNdID0gc2FtZUxlYXZlcztcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIGlmICghbWFpbi5waW5uZWQpIHtcbiAgICAgICAgbWFpbi5zZXRQaW5uZWQodHJ1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uuc2V0QWN0aXZlTGVhZihtYWluKTtcblxuICAgICAgZHVwbGljYXRlcy5mb3JFYWNoKChsKSA9PiB7XG4gICAgICAgIC8vIFx1QzBCNFx1QzlERCBcdUI1MUNcdUI4MDhcdUM3NzQgXHVENkM0IFx1QjJFQlx1QUUzMFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIHNsZWVwKDApLnRoZW4oKCkgPT4gbC5kZXRhY2goKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaW5qZWN0U3R5bGVzKCkge1xuICAgIGlmICh0aGlzLnN0eWxlRWwpIHJldHVybjtcbiAgICB0aGlzLnN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHRoaXMuc3R5bGVFbC5pZCA9ICdhbHdheXMtcGlubmVkLXRhYi1zdHlsZXMnO1xuICAgIHRoaXMuc3R5bGVFbC50ZXh0Q29udGVudCA9IGBcbiAgICAgIC8qIDEuIFx1RDBFRCBcdUQ1NDAgXHVDNTQ0XHVDNzc0XHVDRjU4IFx1QzIyOFx1QUUzMFx1QUUzMCAqL1xuICAgICAgLndvcmtzcGFjZS10YWItaGVhZGVyLXN0YXR1cy1pY29uLm1vZC1waW5uZWQge1xuICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIC8qIDIuIFx1QzEzOFx1Qjg1QyBcdUJEODRcdUQ1NjAgXHVDMEMxXHVEMERDXHVDNUQwXHVDMTFDIFx1QjJFQlx1QUUzMCBcdUJDODRcdUQyQkMgXHVENTZEXHVDMEMxIFx1QkNGNFx1Qzc3NFx1QUUzMCAqL1xuICAgICAgLndvcmtzcGFjZS1zcGxpdC5tb2QtdmVydGljYWwubW9kLXJvb3QgLndvcmtzcGFjZS10YWItaGVhZGVyLWlubmVyLWNsb3NlLWJ1dHRvbiB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIC8qIDMuIHBhbmUgXHVCQTU0XHVCMjc0XHVDNUQwXHVDMTFDICdwYW5lJyBcdUMxMzlcdUMxNTggXHVENTZEXHVCQUE5IFx1QzIyOFx1QUUzMFx1QUUzMCAqL1xuICAgICAgLm1lbnUgLm1lbnUtaXRlbS50YXBwYWJsZVtkYXRhLXNlY3Rpb249XCJwYW5lXCJdIHtcbiAgICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIGA7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlRWwpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVTdHlsZXMoKSB7XG4gICAgaWYgKHRoaXMuc3R5bGVFbCkge1xuICAgICAgdGhpcy5zdHlsZUVsLnJlbW92ZSgpO1xuICAgICAgdGhpcy5zdHlsZUVsID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBuYW1lIGFzIGxvZ1ByZWZpeCB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5cbmV4cG9ydCBjb25zdCBsb2cgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBbJHtsb2dQcmVmaXh9XTogJHttZXNzYWdlfWApO1xufTtcblxuZXhwb3J0IGNvbnN0IG5vdGljZSA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgbmV3IE5vdGljZShgWyR7bG9nUHJlZml4fV06ICR7bWVzc2FnZX1gKTtcbn07XG4iLCAie1xuICBcIm5hbWVcIjogXCJvYnNpZGlhbi10YWItbWFuYWdlbWVudC1wbHVnaW5cIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjBcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgaXMgYSBwbHVnaW4gZm9yIE9ic2lkaWFuIChodHRwczovL29ic2lkaWFuLm1kKSB0aGF0IGVuaGFuY2VzIHlvdXIgd29ya2Zsb3cgYnkgYXV0b21hdGljYWxseSBwaW5uaW5nIGV2ZXJ5IG5ldyB0YWIgeW91IG9wZW5cIixcbiAgXCJtYWluXCI6IFwibWFpbi5qc1wiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwibm9kZSBlc2J1aWxkLmNvbmZpZy5tanNcIixcbiAgICBcImJ1aWxkXCI6IFwidHNjIC1ub0VtaXQgLXNraXBMaWJDaGVjayAmJiBub2RlIGVzYnVpbGQuY29uZmlnLm1qcyBwcm9kdWN0aW9uXCIsXG4gICAgXCJsaW50XCI6IFwibnB4IGVzbGludCAuL3NyY1wiLFxuICAgIFwiY2hlY2stZm9ybWF0XCI6IFwibnB4IHByZXR0aWVyIC0td3JpdGUgc3JjXCIsXG4gICAgXCJmb3JtYXRcIjogXCJucHggcHJldHRpZXIgLS13cml0ZSBzcmNcIixcbiAgICBcInZlcnNpb25cIjogXCJub2RlIHZlcnNpb24tYnVtcC5tanMgJiYgZ2l0IGFkZCBtYW5pZmVzdC5qc29uIHZlcnNpb25zLmpzb25cIixcbiAgICBcInJlbGVhc2VcIjogXCJjYXQgcGFja2FnZS5qc29uIHwganEgJy52ZXJzaW9uJyB8IHhhcmdzIC4vc2NyaXB0cy9yZWxlYXNlLnNoXCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJvYnNpZGlhblwiLFxuICAgIFwib2JzaWRpYW4tcGx1Z2luXCJcbiAgXSxcbiAgXCJhdXRob3JcIjogXCJIYW1tZXJmYWxsR2VuZXNpc1wiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMTYuMTEuNlwiLFxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCI1LjI5LjBcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCI1LjI5LjBcIixcbiAgICBcImJ1aWx0aW4tbW9kdWxlc1wiOiBcIjMuMy4wXCIsXG4gICAgXCJlc2J1aWxkXCI6IFwiXjAuMjUuM1wiLFxuICAgIFwib2JzaWRpYW5cIjogXCJsYXRlc3RcIixcbiAgICBcInRzbGliXCI6IFwiMi40LjBcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCI0LjcuNFwiXG4gIH0sXG4gIFwicGFja2FnZU1hbmFnZXJcIjogXCJwbnBtQDguNi41XCJcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxJQUFBQSxtQkFBc0M7OztBQ0R0QyxzQkFBdUI7OztBQ0NyQixXQUFROzs7QURFSCxJQUFNLE1BQU0sQ0FBQyxZQUFvQjtBQUN0QyxVQUFRLElBQUksSUFBSSxJQUFTLE1BQU0sT0FBTyxFQUFFO0FBQzFDOzs7QUREQSxJQUFxQixrQkFBckIsY0FBNkMsd0JBQU87QUFBQSxFQUFwRDtBQUFBO0FBQ0UsU0FBUSxVQUFtQztBQUFBO0FBQUEsRUFFM0MsTUFBTSxTQUFTO0FBQ2IsUUFBSSxZQUFZO0FBQ2hCLFNBQUssZUFBZTtBQUNwQixTQUFLLGFBQWE7QUFDbEIsUUFBSSx1QkFBdUI7QUFBQSxFQUM3QjtBQUFBLEVBRUEsV0FBVztBQUNULFFBQUksV0FBVztBQUNmLFNBQUssYUFBYTtBQUNsQixRQUFJLGNBQWM7QUFBQSxFQUNwQjtBQUFBLEVBRVEsaUJBQWlCO0FBQ3ZCLFNBQUssSUFBSSxVQUFVLEdBQUcsc0JBQXNCLENBQUMsU0FBUztBQXJCMUQ7QUFzQk0sVUFBSSxDQUFDLEtBQU07QUFJWCxVQUFJLENBQUMsS0FBSyxRQUFRO0FBQ2hCLGFBQUssVUFBVSxJQUFJO0FBQUEsTUFDckI7QUFHQSxZQUFNLGFBQThCLENBQUM7QUFDckMsdUJBQUssV0FBTCxtQkFBYSxhQUFiLG1CQUF1QixRQUFRLENBQUMsVUFBMEM7QUFoQ2hGLFlBQUFDLEtBQUFDO0FBaUNRLGNBQU0sSUFBSSxLQUFLLElBQUksVUFBVSxZQUFZLE1BQU0sRUFBRTtBQUNqRCxjQUFNLGFBQWEsVUFBVSxLQUFLLFFBQVEsVUFBVSxFQUFFO0FBRXRELFlBQUksZ0JBQWNELE1BQUEsS0FBSyxLQUFLLFNBQVYsZ0JBQUFBLElBQWdCLFlBQVNDLE1BQUEsRUFBRSxLQUFLLFNBQVAsZ0JBQUFBLElBQWEsT0FBTTtBQUM1RCxxQkFBVyxLQUFLLENBQUM7QUFBQSxRQUNuQjtBQUFBLE1BQ0Y7QUFDQSxVQUFJLFdBQVcsVUFBVSxFQUFHO0FBRTVCLFlBQU0sQ0FBQyxNQUFNLEdBQUcsVUFBVSxJQUFJO0FBRTlCLFVBQUksQ0FBQyxLQUFLLFFBQVE7QUFDaEIsYUFBSyxVQUFVLElBQUk7QUFBQSxNQUNyQjtBQUNBLFdBQUssSUFBSSxVQUFVLGNBQWMsSUFBSTtBQUVyQyxpQkFBVyxRQUFRLENBQUMsTUFBTTtBQUd4QixjQUFNLENBQUMsRUFBRSxLQUFLLE1BQU0sRUFBRSxPQUFPLENBQUM7QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDSCxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRVEsZUFBZTtBQUNyQixRQUFJLEtBQUssUUFBUztBQUNsQixTQUFLLFVBQVUsU0FBUyxjQUFjLE9BQU87QUFDN0MsU0FBSyxRQUFRLEtBQUs7QUFDbEIsU0FBSyxRQUFRLGNBQWM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFnQjNCLGFBQVMsS0FBSyxZQUFZLEtBQUssT0FBTztBQUFBLEVBQ3hDO0FBQUEsRUFFUSxlQUFlO0FBQ3JCLFFBQUksS0FBSyxTQUFTO0FBQ2hCLFdBQUssUUFBUSxPQUFPO0FBQ3BCLFdBQUssVUFBVTtBQUFBLElBQ2pCO0FBQUEsRUFDRjtBQUNGOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiX2EiLCAiX2IiXQp9Cg==
