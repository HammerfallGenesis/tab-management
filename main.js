/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AlwaysPinnedTab
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/message.ts
var import_obsidian = require("obsidian");

// package.json
var name = "obsidian-tab-management-plugin";

// src/message.ts
var log = (message) => {
  console.log(`[${name}]: ${message}`);
};

// src/setting.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  avoidDuplicateTabs: false
};
var createToggle = (containerEl, plugin, key, name2, desc) => {
  return new import_obsidian2.Setting(containerEl).setName(name2).setDesc(desc).addToggle(
    (toggle) => toggle.setValue(plugin.settings[key]).onChange((value) => {
      plugin.settings[key] = value;
      plugin.saveSettings();
    })
  );
};
var AlwaysPinnedTabSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Always Pinned Tab" });
    createToggle(
      containerEl,
      this.plugin,
      "avoidDuplicateTabs",
      "Avoid duplicate tabs",
      "If the opened file already exists in tabs, the plugin will close the newly opened leaf and activate the pre-existing leaf."
    );
  }
};

// src/main.ts
var AlwaysPinnedTab = class extends import_obsidian3.Plugin {
  async onload() {
    log("loading...");
    await this.loadSettings();
    this.registerEvents();
    this.addSettingTab(new AlwaysPinnedTabSettingTab(this.app, this));
    log("loaded.");
  }
  async onunload() {
    log("unloaded.");
  }
  async registerEvents() {
    this.app.workspace.on("active-leaf-change", (leaf) => {
      var _a, _b;
      if (!leaf) return;
      if (!leaf.pinned) {
        leaf.setPinned(true);
      }
      if (this.settings.avoidDuplicateTabs) {
        const sameLeaves = [];
        (_b = (_a = leaf.parent) == null ? void 0 : _a.children) == null ? void 0 : _b.forEach((child) => {
          var _a2, _b2;
          const l = this.app.workspace.getLeafById(child.id);
          const isMarkdown = "file" in leaf.view && "file" in l.view;
          if (isMarkdown && ((_a2 = leaf.view.file) == null ? void 0 : _a2.path) === ((_b2 = l.view.file) == null ? void 0 : _b2.path)) {
            sameLeaves.push(l);
          }
        });
        if (sameLeaves.length === 0) return;
        const [main, ...duplicates] = sameLeaves;
        if (!main.pinned) {
          main.setPinned(true);
        }
        this.app.workspace.setActiveLeaf(main);
        duplicates.forEach((l) => {
          sleep(0).then(() => {
            l.detach();
          });
        });
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
